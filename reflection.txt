1. use HashMap wisely to avoid scanning elements in an array in a loop - O(1) look-up!
2. if given an array question, can ask clarifying questions as follows:
	a. contains negative numbers?
	b. sorted?
	c. contains duplicates?
3. use divide&conquer to split the problem into subproblems
4. find duplicate number in the array, given the requirement that time complexity cannot be O(n^2), cannot use brute force
	=> consider binary search method, takes O(nlogn) time
	=> another solution is O(n) http://keithschwarz.com/interesting/code/find-duplicate/FindDuplicate.python.html with linked list and ptrs
5. consider special/base cases before writing code,
	a. if string is null? len = 1?
	b. if array is empty? len = 1?
	c. if number is 0? is 1?
6. if given running time requirement with logn, consider binary search
7. linked-list questions:
	a. use ptrs to keep track of current position
	b. check if both LLs are null or only need one of them to be not null
	c. how to update the ptrs
8. check if a BST is valid:
	a. get the min of right child & max of left child
	b. true if rightMin > root.val && leftMax < root.val (check recursively), return false immediately if this condition is not satisfied
9. checks on a binary tree:
	a. root itself is null?
	b. both children exist?
		=> recursive cases here?
		=> possible iterative solution with Stack or Queue
	c. both children missing?
	d. missing one children?
10. binary tree problems : consider recursion first, think carefully about base case && recursive cases
11. tree traversal: in-order, pre-order, post-order
12. TwoSum:
	a. standard version: input is an array =>  use HashMap to reduce loops 
	b. input is a BST => convert to a list(ArrayList<Intger>) => standard version
13. BFS & DFS for a tree: https://www.geeksforgeeks.org/level-order-tree-traversal/
	=> Tl;Dr:
	 BFS uses a queue(initalized with root), if not current content in the queue is not a match, then add it's children into the queue, return false if queue is empty
	DFS uses recursion and asks all it's children "do you have a path to target?" 
14. DFS for a graph:
	=> (algorithm) https://www.geeksforgeeks.org/depth-first-search-or-dfs-for-a-graph/
	=> (application) https://www.geeksforgeeks.org/?p=11644
15. Backtracking: a general algorithm for finding all (or some) solutions to some computational problems, that incrementally builds candidates to the solutions, and abandons each partial candidate (“backtracks”) as soon as it determines that the candidate cannot possibly be completed to a valid solution.
	=>(VERY USEFUL!) general approach templates: https://leetcode.com/problems/combination-sum/discuss/16502/A-general-approach-to-backtracking-questions-in-Java-(Subsets-Permutations-Combination-Sum-Palindrome-Partitioning)
16. learn to generalize a problem, sometimes they are all related, just in another form (diff input type / style)
17. java sort a user defined class: implement a Comparator class 
	=> https://www.geeksforgeeks.org/collections-sort-java-examples/
18. use data structres like heap, bst, priority queue, stack, queue when possible!
19. when doing design problems, be very familiar with data structures and their properties are very IMPORTANT!
	=> read this (a intro & comparisons between DS): https://medium.com/omarelgabrys-blog/diving-into-data-structures-6bc71b2e8f92 
20. java remove all non-character/number in a string s = s.replaceAll("[^A-Za-z0-9]+", "")
21. test the code throughoutly before submit!
22. if wish to pertain order of insertion -- use LinkedHashMap or TreeMap in Java
23. use String.equals() to compare a string
24. when doing int arithmetic => be careful with range, and check the overflow cases
25. if there is a time complexity requirement, avoid nested loops and start from useful data structures(hash map, hash set, hash table, queue, etc.)
26. keep track of ptrs in LinkedLists (current, previous, next)
27. HashMap.contains() takes O(n) HashSet.contains() takes O(1)
28. start from brute force -> try to improve on some part of the iteration (use binary Search instead of iteration?)
	-> store the intermediate values instead of calculating it each time
29. if doing matching problems, consider stack
30. in java Stack.peek() is equivalent to stack.top
31. in LinkedList: BE VERY CAREFUL WITH NullPtrException!!!!!
32. slow & fast ptr can solve some of LinkedList problems, remember to consider 2ptr alg 
	=> improve extra space





